Index: functions.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import torch\nfrom variables import signal\n\n\n\ndef sig_loss(expectedSignal,expectedBackground):\n    def sigloss(y_true,y_pred):\n\n        #print(expectedBackground)\n        #print(expectedSignal)\n        #print(expectedSignal)\n        signalWeight = expectedSignal/torch.sum(y_true)    #expected/actual signal numbers\n        backgroundWeight = expectedBackground/torch.sum(1-y_true)   #expected/actual background numbers\n        print(\"weights are {},{}\".format(signalWeight,backgroundWeight))\n       # print(y_true)\n\n        y_pred_rearanged = torch.reshape(y_pred,(-1,))\n\n\n        #print(y_pred)\n        #print(y_pred_rearanged)\n        #print(y_pred_rearanged)\n        #print(y_pred*y_true)\n        #print(y_true*y_pred_rearanged)\n\n\n        s = torch.sum(y_pred_rearanged*y_true)\n        print(\"s\")\n        print(s)\n        #print(\"s = {}\".format(s))\n        b = torch.sum(y_pred_rearanged*(1-y_true))\n        print(b)\n        #print(\"b = {}\".format(b))\n\n        #exp = torch.exp(-(s*s)/(s+b+ 0.000000001))\n        #scaled_exp = torch.exp(-(s*s)/(s+b+ 0.000000001))*10000000\n        return -(s*s)/(s+b+0.000001)\n    return sigloss\n\n\n\ndef sig_loss2(expectedSignal,expectedBackground):\n    def sigloss(y_true,y_pred):\n        #print(expectedSignal)\n        #print(expectedBackground)\n        #print(expectedSignal)\n        signalWeight = expectedSignal/torch.sum(y_true)    #expected/actual signal numbers\n        backgroundWeight = expectedBackground/torch.sum(1-y_true)  #expected/actual background numbers\n\n        s = signalWeight*torch.sum(y_pred*y_true)\n        inverted_target_matrix = torch.zeros(y_true.size()[0],10)\n        for i in range(y_true.size()[0]):\n            if y_true[i][signal] ==0:\n                inverted_target_matrix[i][signal] = 1\n\n\n\n        b = backgroundWeight*torch.sum(y_pred*inverted_target_matrix)\n\n        #print(\"s {}\".format(s))\n        #print(\"b {}\".format(b))\n        #print(\"s+b {}\".format(s+b))\n\n        #exp = torch.exp(-(s*s)/(s+b+ 0.000000001))\n        #scaled_exp = torch.exp(-(s*s)/(s+b+ 0.000000001))*10000000\n        return -(s*s)/(s+b+0.000001)\n    return sigloss\n\n\n\n\n\n\ndef significance_loss2(target,output,batch_size):\n    torch.autograd.set_detect_anomaly(True)\n\n    target_matrix = torch.zeros(len(target),10)\n    for i in range(len(target)):\n        if target[i] == signal:\n            target_matrix[i][signal] = 1\n\n    sigloss = sig_loss2(batch_size/10,9*batch_size/10)\n    loss = sigloss(target_matrix,output)\n    return loss\n\n\n\n\ndef significance_loss(target,output,batch_size):\n    #print(\"significance loss called\")\n    torch.autograd.set_detect_anomaly(True)\n\n\n    for i in range(len(target)):\n        if target[i] == signal:\n            target[i] = 1\n        else:\n            target[i] = 0\n\n    sigloss = sig_loss(batch_size/10,9*batch_size/10)\n    loss = sigloss(target,output)\n    return loss\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/functions.py b/functions.py
--- a/functions.py	(revision 8de1198ae62ccb3057aee67fad47eea4df352db2)
+++ b/functions.py	(date 1626625862690)
@@ -14,7 +14,7 @@
         print("weights are {},{}".format(signalWeight,backgroundWeight))
        # print(y_true)
 
-        y_pred_rearanged = torch.reshape(y_pred,(-1,))
+        y_pred_rearranged = torch.reshape(y_pred,(-1,))
 
 
         #print(y_pred)
@@ -24,11 +24,11 @@
         #print(y_true*y_pred_rearanged)
 
 
-        s = torch.sum(y_pred_rearanged*y_true)
+        s = torch.sum(y_pred_rearranged*y_true)
         print("s")
         print(s)
         #print("s = {}".format(s))
-        b = torch.sum(y_pred_rearanged*(1-y_true))
+        b = torch.sum(y_pred_rearranged*(1-y_true))
         print(b)
         #print("b = {}".format(b))
 
Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import torch\nimport torch.optim as optim\nimport matplotlib.pyplot as plt\nfrom net import Net\nfrom test import test\nfrom train import train\nfrom variables import *\nfrom train_sigloss import train_sigloss\nfrom loaders import test_loader\nimport math\n\ntorch.backends.cudnn.enabled = False\n\n\n\ndef initilize():\n    torch.manual_seed(random_seed)\n    network = Net()\n    optimizer = optim.SGD(network.parameters(), lr=learning_rate, momentum=momentum)\n    return network, optimizer\n\n\n\ndef train_and_test():\n    torch.manual_seed(random_seed)\n    network = Net()\n\n    optimizer = optim.SGD(network.parameters(), lr=learning_rate, momentum=momentum)\n\n    test_loss_list = []\n    train_loss_list = []\n\n    for epoch in range(1, n_epochs + 1):\n\n        print(\"Epoch number {}\".format(epoch))\n        train_losses = train(network,optimizer)\n\n        for i in range(len(train_losses)):\n            print(train_losses[i])\n            train_loss_list.append(train_losses[i])\n\n        print(\"Training Complete, losses {}\".format(train_losses))\n        test_losses,total_number_correct,true_positive_count,false_positive_count,sample_output = test(network,-1)\n        for i in range(len(test_losses)):\n            test_loss_list.append(math.exp(test_losses[i]))\n\n        examples = enumerate(test_loader)\n        batch_idx, (example_data, example_targets) = next(examples)\n\n        #print(network(example_data))\n\n\n\n        print(\"Testing Complete\")\n        print(total_number_correct)\n        print(\"percent accuracy: {}, true positives {}, false positives {}\".format(100*total_number_correct/10000,true_positive_count,false_positive_count))\n        torch.save(network.state_dict(), '/Users/mayabasu/PycharmProjects/MNIST-test-neural-net2/neuralnets/model.pth')\n        #print(\"LOSSES\")\n        #print(train_losses)\n        #print(train_loss_list)\n        #print(test_losses)\n        #print(test_loss_list)\n    plt.subplot(1,2,1)\n    plt.xlabel(\"Batch # (15 batches per epoch)\")\n    plt.ylabel(\"Ln of the Training Loss\")\n    #plt.ylim(-10,10)\n\n    plt.plot(train_loss_list)\n    plt.savefig(\"/Users/mayabasu/PycharmProjects/MNIST-test-neural-net2/matplotlib_output/lr0.001train.png\")\n\n    #plt.subplot(1,2,2)\n    #plt.xlabel(\"Batch # (10 batches per epoch)\")\n    #plt.ylabel(\"Ln of the Test Loss\")\n    #plt.ylim(-10,10)\n\n    #plt.plot(test_loss_list)\n\n\n\n\n    #plt.savefig(\"/Users/mayabasu/PycharmProjects/MNIST-test-neural-net2/matplotlib_output/lr0.001test_alone.png\")\n\ntrain_and_test()\n\n\n\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.py b/main.py
--- a/main.py	(revision 8de1198ae62ccb3057aee67fad47eea4df352db2)
+++ b/main.py	(date 1626739429599)
@@ -3,7 +3,7 @@
 import matplotlib.pyplot as plt
 from net import Net
 from test import test
-from train import train
+from train_mse import train
 from variables import *
 from train_sigloss import train_sigloss
 from loaders import test_loader
@@ -12,7 +12,6 @@
 torch.backends.cudnn.enabled = False
 
 
-
 def initilize():
     torch.manual_seed(random_seed)
     network = Net()
@@ -54,7 +53,7 @@
         print("Testing Complete")
         print(total_number_correct)
         print("percent accuracy: {}, true positives {}, false positives {}".format(100*total_number_correct/10000,true_positive_count,false_positive_count))
-        torch.save(network.state_dict(), '/Users/mayabasu/PycharmProjects/MNIST-test-neural-net2/neuralnets/model.pth')
+        torch.save(network.state_dict(), '/Users/noahomordia/Downloads/MNIST-test-neural-net/neuralnets/model.pth')
         #print("LOSSES")
         #print(train_losses)
         #print(train_loss_list)
@@ -66,7 +65,7 @@
     #plt.ylim(-10,10)
 
     plt.plot(train_loss_list)
-    plt.savefig("/Users/mayabasu/PycharmProjects/MNIST-test-neural-net2/matplotlib_output/lr0.001train.png")
+    plt.savefig("/Users/noahomordia/Downloads/MNIST-test-neural-net/matplotlib_output/lr0.001train.png")
 
     #plt.subplot(1,2,2)
     #plt.xlabel("Batch # (10 batches per epoch)")
Index: loaders.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import torch\nimport torchvision\nfrom variables import *\n\ntrain_loader = torch.utils.data.DataLoader(\n  torchvision.datasets.MNIST('/Users/mayabasu/pytorchdatasets', train=True, download=True,\n                             transform=torchvision.transforms.Compose([\n                               torchvision.transforms.ToTensor(),\n                               torchvision.transforms.Normalize(\n                                 (0.1307,), (0.3081,))\n                             ])),\n  batch_size=train_batch_size, shuffle=True)\n\ntest_loader = torch.utils.data.DataLoader(\n  torchvision.datasets.MNIST('/Users/mayabasu/pytorchdatasets', train=False, download=True,\n                             transform=torchvision.transforms.Compose([\n                               torchvision.transforms.ToTensor(),\n                               torchvision.transforms.Normalize(\n                                 (0.1307,), (0.3081,))\n                             ])),\n  batch_size=test_batch_size, shuffle=True)\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/loaders.py b/loaders.py
--- a/loaders.py	(revision 8de1198ae62ccb3057aee67fad47eea4df352db2)
+++ b/loaders.py	(date 1626739429591)
@@ -3,19 +3,19 @@
 from variables import *
 
 train_loader = torch.utils.data.DataLoader(
-  torchvision.datasets.MNIST('/Users/mayabasu/pytorchdatasets', train=True, download=True,
+  torchvision.datasets.MNIST('/Users/noahomordia/pytorchdatasets', train=True, download=True,
                              transform=torchvision.transforms.Compose([
                                torchvision.transforms.ToTensor(),
                                torchvision.transforms.Normalize(
                                  (0.1307,), (0.3081,))
                              ])),
-  batch_size=train_batch_size, shuffle=True)
+  batch_size=train_batch_size, shuffle=False)
 
 test_loader = torch.utils.data.DataLoader(
-  torchvision.datasets.MNIST('/Users/mayabasu/pytorchdatasets', train=False, download=True,
+  torchvision.datasets.MNIST('/Users/noahomordia/pytorchdatasets', train=False, download=True,
                              transform=torchvision.transforms.Compose([
                                torchvision.transforms.ToTensor(),
                                torchvision.transforms.Normalize(
                                  (0.1307,), (0.3081,))
                              ])),
-  batch_size=test_batch_size, shuffle=True)
+  batch_size=test_batch_size, shuffle=False)
Index: rocmaker.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import torch\nfrom test import test\nfrom net import Net\nfrom variables import *\nimport matplotlib.pyplot as plt\n\ndef load_network():\n    network_state = torch.load(\"/Users/mayabasu/PycharmProjects/MNIST-test-neural-net2/neuralnets/model.pth\")\n    network = Net()\n    network.load_state_dict(network_state)\n    return network\n\n\n\n\n\ndef make_roc_curve(cutoffs, network,filepath):\n\n    false_positives = []\n    true_positives = []\n\n\n    for i in range(len(cutoffs)):\n\n\n        hits, correct, test_losses,num_times_signal_was_missed,num_times_signal_was_contaminated,num_times_signal_appears_in_dataset, false_positive_count,true_positive_count,deviations = test(network,test_batch_size,cutoffs[i],True)\n        print(\"fpc = {}, tpc = {}\".format(false_positive_count,true_positive_count))\n        print(\"DEVIATIONS {}\".format(deviations))\n        print(\"contaminated {} times, missed {} times, hit {} times\".format(num_times_signal_was_contaminated,num_times_signal_was_missed, hits))\n        print(num_times_signal_appears_in_dataset)\n        false_positives.append(false_positive_count)\n        true_positives.append(true_positive_count)\n    print(false_positives)\n    print(true_positives)\n\n    false_positives_scaled = []\n    true_positives_scaled = []\n    for i in range(len(false_positives)):\n        false_positives_scaled.append(false_positives[i]/(10000-num_times_signal_appears_in_dataset))\n\n    for i in range(len(true_positives)):\n        true_positives_scaled.append(true_positives[i]/num_times_signal_appears_in_dataset)\n\n    plt.plot(false_positives_scaled,true_positives_scaled)\n    plt.ylabel('True Positive Rate')\n    plt.xlabel('False Positive Rate')\n    for i in range(0,len(cutoffs)):\n        plt.annotate(xy=[false_positives_scaled[i],true_positives_scaled[i]], s=cutoffs[i])\n    plt.savefig(filepath)\n    return\n\n\n\ncutoffs = [0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9]\n\nnetwork = load_network()\n\nmake_roc_curve(cutoffs,network,\"/Users/mayabasu/PycharmProjects/MNIST-test-neural-net2/matplotlib_output/plot2.png\")\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/rocmaker.py b/rocmaker.py
--- a/rocmaker.py	(revision 8de1198ae62ccb3057aee67fad47eea4df352db2)
+++ b/rocmaker.py	(date 1626739429583)
@@ -5,21 +5,16 @@
 import matplotlib.pyplot as plt
 
 def load_network():
-    network_state = torch.load("/Users/mayabasu/PycharmProjects/MNIST-test-neural-net2/neuralnets/model.pth")
+    network_state = torch.load("/Users/noahomordia/Downloads/MNIST-test-neural-net/neuralnets/model.pth")
     network = Net()
     network.load_state_dict(network_state)
     return network
 
-
-
-
-
 def make_roc_curve(cutoffs, network,filepath):
 
     false_positives = []
     true_positives = []
 
-
     for i in range(len(cutoffs)):
 
 
@@ -55,5 +50,5 @@
 
 network = load_network()
 
-make_roc_curve(cutoffs,network,"/Users/mayabasu/PycharmProjects/MNIST-test-neural-net2/matplotlib_output/plot2.png")
+make_roc_curve(cutoffs,network,"/Users/noahomordia/Downloads/MNIST-test-neural-net/matplotlib_output/plot2.png")
 
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"ProjectRootManager\" version=\"2\" project-jdk-name=\"Python 3.8 (MNIST-test-neural-net2)\" project-jdk-type=\"Python SDK\" />\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 8de1198ae62ccb3057aee67fad47eea4df352db2)
+++ b/.idea/misc.xml	(date 1626560933323)
@@ -1,4 +1,4 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.8 (MNIST-test-neural-net2)" project-jdk-type="Python SDK" />
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.7" project-jdk-type="Python SDK" />
 </project>
\ No newline at end of file
Index: .idea/MNIST-test-neural-net2.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<module type=\"PYTHON_MODULE\" version=\"4\">\n  <component name=\"NewModuleRootManager\">\n    <content url=\"file://$MODULE_DIR$\" />\n    <orderEntry type=\"jdk\" jdkName=\"Python 3.8 (MNIST-test-neural-net2)\" jdkType=\"Python SDK\" />\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\n  </component>\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/MNIST-test-neural-net2.iml b/.idea/MNIST-test-neural-net2.iml
--- a/.idea/MNIST-test-neural-net2.iml	(revision 8de1198ae62ccb3057aee67fad47eea4df352db2)
+++ b/.idea/MNIST-test-neural-net2.iml	(date 1626560933330)
@@ -2,7 +2,7 @@
 <module type="PYTHON_MODULE" version="4">
   <component name="NewModuleRootManager">
     <content url="file://$MODULE_DIR$" />
-    <orderEntry type="jdk" jdkName="Python 3.8 (MNIST-test-neural-net2)" jdkType="Python SDK" />
+    <orderEntry type="jdk" jdkName="Python 3.7" jdkType="Python SDK" />
     <orderEntry type="sourceFolder" forTests="false" />
   </component>
 </module>
\ No newline at end of file
